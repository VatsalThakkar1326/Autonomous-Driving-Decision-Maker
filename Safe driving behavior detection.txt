import cv2
import numpy as np
from keras.models import load_model

# Function for preprocessing the frame before making predictions
def preprocess_frame(frame):
    # Replace this with your preprocessing logic
    # For example, you might need to resize the frame or normalize pixel values
    processed_frame = cv2.resize(frame, (240, 240))  # Adjust the size as needed
    processed_frame = processed_frame / 255.0  # Normalize pixel values
    return processed_frame

# Load your deep learning model
# Replace 'your_model_path.h5' with the path to your model file
model = load_model('/workspaces/CAPSTONE-1/your_model.h5')
class_labels = ["other", "Safe Driving", "Talking Phone", "Texting Phone", "Turning"]
# Open the camera (use 0 for the default camera)
cap = cv2.VideoCapture(0)

while True:
    # Capture frame-by-frame
    ret, frame = cap.read()

    # Preprocess the frame for your deep learning model
    processed_frame = preprocess_frame(frame)

    # Make predictions using your deep learning model
    predictions = model.predict(np.expand_dims(processed_frame, axis=0))
    # Get the predicted class label
    predicted_class_index = np.argmax(predictions)
    predicted_class_label = class_labels[predicted_class_index]
    # Post-process the predictions if needed
    # Replace this with your post-processing logic

    # Display the original frame with any overlays or annotations
    # Replace this with your visualization logic
    print("Predicted Class:", predicted_class_label)
    cv2.imshow('Camera Feed', frame)

    # Break the loop if 'q' is pressed
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

# Release the camera and close all OpenCV windows
cap.release()
cv2.destroyAllWindows()
